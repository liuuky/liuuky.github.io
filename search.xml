<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[面向对象程序设计<类与对象>]]></title>
      <url>/2017/07/13/----1/</url>
      <content type="html"><![CDATA[<p>#面向对象程序设计  —类与对象<br>   面向对象：以一种组件化的形式进行代码的设计。<br>   优点：代码重用。 </p>
<h5 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h5><pre><code>1.封装性：保护内部的定义结构安全性 。
2.继承性：在已有的程序结构上继续扩充新的功能。
3.多态性：指的是在某一个概念范围内的满足。
</code></pre><p>#####面向对象的开发步骤：<br>    OOA(面向对象分析)<br>    OOD（面向对象设计）<br>    OOP（面向对象编程）</p>
<p>类实际上是对象操作的模板，但是类不能直接使用，必须通过实例对象使用。</p>
<hr>
<pre><code>class Book {
        String title;
        double price;
        public void getInfo() {
                System.out.println(&quot;图书名称：&quot; + title + &quot;,价格:&quot; +price);
                }

        }
</code></pre><p>在类里面定义了两个属性和一个方法，类现在已经产生，但是如果想要使用类必须要有对象，那么对象的定义格式有如下两种。</p>
<pre><code>    ·声明并实例化对象：类名称 对象名称 = new 类名称（）；
    ·分步完成：
        -声明对象：类名称 对象名称 = null；
        -实例化对象： 对象名称 = new 类名称（）；
</code></pre><p>引用数据类型与基本数据类型最大的不同在于需要内存的开辟及使用，所以关键字 new 的主要功能就是开辟内存空间，即：只要是引用数据类型想使用，那么就必须使用关键词 new 开辟空间。<br>当一个对象实例化之后那么就可以按照如下的方式利用对象来操作类的结构：</p>
<pre><code>·对象.属性：表示要操作类中的属性内容
·对象.方法()：表示要调用类中的方法      
</code></pre><p>范例：使用类—在主类中使用Book类</p>
<pre><code>public class TestDemo {
        public static void main(String args[]) {
                Book bk = new Book() ; //声明并实例化对象
                bk.title = &quot;java开发&quot;; //操作属性内容
                bk.price = 90; //操作属性内容
                bk.getInfo (); //调用类中的getInfo（）方法

        }
}
</code></pre><p>如果想要对以上的程序进行内存分析，可以首先给出两块内存空间的概念：</p>
<pre><code>·堆内存：保存每一个对象的属性内容，堆内存需要用关键字 new 在可以开辟新。
·栈内存：保存的是一块堆内存的地址，但是为了分析方便，可以简单地理解栈内存保存的是对象名字；
</code></pre><p>#引用数据的初步分析<br>引用类似C++的指针，但比之间更加简单</p>
<pre><code>public class TestDemo {
        public static void main(String args[]) {
                Book bookA = new Book() ; //声明并实例化对象
                Book bookB = new Book() ;
                bookA.title = &quot;Java开发&quot;; //操作属性内容
                bookA.price = 89.8; //操作属性内容
                bookB.title = &quot;JSP开发&quot;; //操作属性内容
                bookB.price = 69.8; //操作属性内容
                bookB = bookA;//引用关系
                bookB.price = 100.1;
                bookA.getInfo (); //调用类中的getInfo（）方法

        }
}
</code></pre><p>内存分析图：<br><img src="http://osltchohc.bkt.clouddn.com/屏幕快照 2017-07-13 15.34.49.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="屏幕快照 2017-07-13 15.34.49"></p>
<p>总结：</p>
<pre><code>1.类描述的是公共特征，类必须通过对象才可以使用；
2.声明对象指的是为开辟堆内存的对象，如果直接使用此对象会出现“NullPointerException”异常；对象可以通过关键字 new 来进行堆内存空间的开辟，有了对内存应用的对象才成为实例化对象；
3.堆内存保存的是对象中所有属性的内容，而栈内存保存的是对内存的地址数值（为了简单理解，才称栈内存保存的是对象名称）；
4.垃圾空间指的是没有任何栈内存指向的堆内存空间，会被GC不定期进行回收；
5.熟练掌握以上内存图的分析方法；
</code></pre>]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[莎士比亚诗集]]></title>
      <url>/2017/07/06/---/</url>
      <content type="html"><![CDATA[<h2 id="《十四行诗十八首》-莎士比亚"><a href="#《十四行诗十八首》-莎士比亚" class="headerlink" title="《十四行诗十八首》 莎士比亚"></a>《十四行诗十八首》 <code>莎士比亚</code></h2><p><img src="http://osltchohc.bkt.clouddn.com/photo.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="photo"></p>
<hr>
<blockquote>
<pre><code>                    我怎么能够将你比作夏天? 你比夏天更美丽温婉。

                    狂风将五月的蓓蕾凋残，夏日的勾留何其短暂。

                    休恋那丽日当空，转眼会云雾迷蒙; 

                    休叹那百花凋零，摧折于无常天命;

                    唯有你永恒的夏日长新，你的美貌亦毫发无损。

                    死神也无缘将你幽禁，你在我永恒的诗中长存。

                    只要世间尚有人吟诵我的诗篇，这诗就将不朽，永葆你的芳颜。
</code></pre></blockquote>
]]></content>
      
        <categories>
            
            <category> 诗集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
