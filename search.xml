<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[String类的特点]]></title>
      <url>/2017/07/17/----6/</url>
      <content type="html"><![CDATA[<h2 id="String类的两种实例化方式"><a href="#String类的两种实例化方式" class="headerlink" title="String类的两种实例化方式"></a>String类的两种实例化方式</h2><p>①.String对象的直接赋值实例化 语法：<code>String 变量 = “字符串”;</code></p>
<pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>
  4                 System.out.println<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  5         <span class="token punctuation">}</span>
  6 <span class="token punctuation">}</span>
</code></pre>
<p>代码并未使用关键词<code>new</code><br>②.利用构造方法实例化：public String（String str），在构造里面依然要接收一个本类对象</p>
<pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String str <span class="token operator">=</span> new String<span class="token punctuation">(</span> <span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  4                 System.out.println<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  5         <span class="token punctuation">}</span>
  6 <span class="token punctuation">}</span>
</code></pre>
<h2 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h2><p>范例：在String对象上使用“==”比较</p>
<pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String stra <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
  4                 String strb <span class="token operator">=</span> new String<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  5                 String strc <span class="token operator">=</span> strb<span class="token punctuation">;</span>
  6                 System.out.println<span class="token punctuation">(</span>stra <span class="token operator">==</span> strb<span class="token punctuation">)</span><span class="token punctuation">;</span> //false
  7                 System.out.println<span class="token punctuation">(</span>stra <span class="token operator">==</span> strc<span class="token punctuation">)</span><span class="token punctuation">;</span> //false
  8                 System.out.println<span class="token punctuation">(</span>strb <span class="token operator">==</span> strc<span class="token punctuation">)</span><span class="token punctuation">;</span>//true
  9         <span class="token punctuation">}</span>
 10 <span class="token punctuation">}</span>
</code></pre>
<h4 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h4><p><img src="media/15002781881180/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-18%2016.20.02.png" alt="屏幕快照 2017-07-18 16.20.02"></p>
<pre><code>通过分析可以看出：&quot;==&quot; 确实进行了比较，但是比较的是内存地址的数值，所有“==”是属于数值的比较，比较的是内存地址。
因此若要比较字符串的内容的话， 那么可以使用String类里面定义的方法： 

· 比较内容（与原始定义有一些差别）：public boolean equals（String str）;
</code></pre><p>范例： </p>
<pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String stra <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
  4                 String strb <span class="token operator">=</span> new String<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  5                 String strc <span class="token operator">=</span> strb<span class="token punctuation">;</span>
  6                 System.out.println<span class="token punctuation">(</span>stra.equals<span class="token punctuation">(</span>strb<span class="token punctuation">))</span><span class="token punctuation">;</span>  //true
  7                 System.out.println<span class="token punctuation">(</span>stra.equals<span class="token punctuation">(</span>strc<span class="token punctuation">))</span><span class="token punctuation">;</span>  //true
  8                 System.out.println<span class="token punctuation">(</span>strb.equals<span class="token punctuation">(</span>strc<span class="token punctuation">))</span><span class="token punctuation">;</span>  //true
  9         <span class="token punctuation">}</span>
 10 <span class="token punctuation">}</span>
</code></pre>
<p>面试题：请解释在字符串中相等的判断中“==”与“equals（）”的区别？</p>
<pre><code>· “==”是Java提供的关系运符，主要功能是进行数值相等的判断，如果用在了String对象上表示的是内存地址数值的比较；
·  “equals（）”：是由String提供的一个方法，此方法专门负责进行字符串的比较。
</code></pre><h2 id="S字符串常量就是String的匿名对象"><a href="#S字符串常量就是String的匿名对象" class="headerlink" title="S字符串常量就是String的匿名对象"></a>S字符串常量就是String的匿名对象</h2><p>范例：观察字符串是匿名对象的验证</p>
<pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
  4                 System.out.println<span class="token punctuation">(</span><span class="token string">"hello"</span>.equals<span class="token punctuation">(</span>str<span class="token punctuation">))</span><span class="token punctuation">;</span>
  5         <span class="token punctuation">}</span>
  6 <span class="token punctuation">}</span>
</code></pre>
<p> 那么所谓的匿名赋值就是将一个匿名对象设置了一个名字而已，但是唯一的区别是，String类的匿名对象是系统自动生成的，不再由用户自己直接创建。<br> 小小技巧：为了避免空指向异常（使用了未实例化的对象或者使用了未实例化的引用数据类型 ）的出现，可以将字符串写在前面调用方法</p>
<pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String input <span class="token operator">=</span> null<span class="token punctuation">;</span>    //假设这个内容由用户输入
  4                  //如果用户输入的是hello，满足条件
  5                 if<span class="token punctuation">(</span><span class="token string">"hello"</span>.equals<span class="token punctuation">(</span>input<span class="token punctuation">))</span><span class="token punctuation">{</span>  //equals处理null
  6                         System.out.println<span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  7                 <span class="token punctuation">}</span>
  8         <span class="token punctuation">}</span>
  9 <span class="token punctuation">}</span>
</code></pre>
<p>倒过来使用永远不会出现空指向异常。</p>
<h4 id="特别注意：在以后的开发中，如果要判断输入内容是否是某一字符串，一定要把字符串写在最前面-。"><a href="#特别注意：在以后的开发中，如果要判断输入内容是否是某一字符串，一定要把字符串写在最前面-。" class="headerlink" title="特别注意：在以后的开发中，如果要判断输入内容是否是某一字符串，一定要把字符串写在最前面 。"></a>特别注意：在以后的开发中，如果要判断输入内容是否是某一字符串，一定要把字符串写在最前面 。</h4><h2 id="String类的两种实例化的区别"><a href="#String类的两种实例化的区别" class="headerlink" title="String类的两种实例化的区别"></a>String类的两种实例化的区别</h2><h5 id="1-直接赋值-只会开辟一个堆内存空间，并且会自动保存在对象池之中以供下次重复使用。"><a href="#1-直接赋值-只会开辟一个堆内存空间，并且会自动保存在对象池之中以供下次重复使用。" class="headerlink" title="1.直接赋值:只会开辟一个堆内存空间，并且会自动保存在对象池之中以供下次重复使用。"></a>1.直接赋值:只会开辟一个堆内存空间，并且会自动保存在对象池之中以供下次重复使用。</h5><pre class=" language-bash"><code class="language-bash">  1 public class StringDemo <span class="token punctuation">{</span>
  2         public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  3                 String stra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  4                 String strb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  5                 String strc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  6                 String strd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  7                 System.out.println<span class="token punctuation">(</span>stra <span class="token operator">==</span> strb<span class="token punctuation">)</span><span class="token punctuation">;</span> //true
  8                 System.out.println<span class="token punctuation">(</span>stra <span class="token operator">==</span> strc<span class="token punctuation">)</span><span class="token punctuation">;</span> //true
  9                 System.out.println<span class="token punctuation">(</span>strb <span class="token operator">==</span> strc<span class="token punctuation">)</span><span class="token punctuation">;</span> //true
 10                 System.out.println<span class="token punctuation">(</span>stra <span class="token operator">==</span> strd<span class="token punctuation">)</span><span class="token punctuation">;</span> //false
 11                 <span class="token punctuation">}</span>
 12 <span class="token punctuation">}</span>
</code></pre>
<h4 id="分析图："><a href="#分析图：" class="headerlink" title="分析图："></a>分析图：</h4><p><img src="media/15002781881180/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-18%2017.25.07.png" alt="屏幕快照 2017-07-18 17.25.07"></p>
<h4 id="共享设计模式："><a href="#共享设计模式：" class="headerlink" title="共享设计模式："></a>共享设计模式：</h4><p>在JVM的底层实际上会存在一个对象池（不一定只保存String对象），当代码中使用了直接赋值的方式定义了一个String 类对象时，会将此字符串对象所使用的匿名对象入池保存，而后如果后面还有其他String类对象也采用了直接赋值的方式，并且设置了同样内容的时候，不会开辟新的堆内存空间，而是会使用已有的对象进行引用的分配，从而继续使用。</p>
<h5 id="2-采用构造方法实例化：（String-str-new-String（“字符串”）；）：会开辟两个堆内存空间，其中有一块空间将成为垃圾，并且不会自动入池，但是用户可以使用-intern（）方法手工入池。即：String-str-new-String（“字符串”）-intern（）；"><a href="#2-采用构造方法实例化：（String-str-new-String（“字符串”）；）：会开辟两个堆内存空间，其中有一块空间将成为垃圾，并且不会自动入池，但是用户可以使用-intern（）方法手工入池。即：String-str-new-String（“字符串”）-intern（）；" class="headerlink" title="2.采用构造方法实例化：（String str = new String（“字符串”）；）：会开辟两个堆内存空间，其中有一块空间将成为垃圾，并且不会自动入池，但是用户可以使用 intern（）方法手工入池。即：String str = new String（“字符串”）.intern（）；"></a>2.采用构造方法实例化：（String str = new String（“字符串”）；）：会开辟两个堆内存空间，其中有一块空间将成为垃圾，并且不会自动入池，但是用户可以使用 intern（）方法手工入池。即：String str = new String（“字符串”）.intern（）；</h5><h4 id="字符串内容一旦定义就不可更改"><a href="#字符串内容一旦定义就不可更改" class="headerlink" title="字符串内容一旦定义就不可更改"></a>字符串内容一旦定义就不可更改</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>String类的特点：</p>
<pre><code>1. String 类对象的相等判断使用 equals（） 方法完成，“==”实现的是地址数值比较。
2. 字符串内容一旦声明则不可改变,String类对象内容的改变是依靠引用关系的变更实现的
3. String 类有两种是实例化方式，使用直接赋值可以不产生垃圾空间，并且可以自动入池，不要使用构造方法。
</code></pre>]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《日出入》乐府诗]]></title>
      <url>/2017/07/17/----4/</url>
      <content type="html"><![CDATA[<h2 id="《日出入》-西汉乐府诗集"><a href="#《日出入》-西汉乐府诗集" class="headerlink" title="《日出入》  西汉乐府诗集"></a>《日出入》  西汉乐府诗集</h2><p><img src="http://osltchohc.bkt.clouddn.com/20120118101048.jpg?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="20120118101048"></p>
<pre><code>日出入安穷？时世不与人同。
故春非我春，夏非我夏，秋非我秋，冬非我冬。
泊如四海之池，遍观是邪谓何？
吾知所了，独乐六龙，六龙之调，使我心苦。
訾黄其何不徕下。
</code></pre><p>译文：</p>
<p>太阳每天早上升起，晚上落下，循环往复没有穷尽的时候。世间的事物在不断发展，而人的生命却很短促，与世间的永恒存在不同。四季的更迭交替不依靠人的意志为转移，所以春并非我想要的春，夏并非我想象中的夏，秋并非我期盼的秋，冬并非我中意的冬。宇宙之大好比四海的水一样，没有尽头，而人生短促，好比一个小池。看遍了这些事实，应该怎么办呢？我了解怎样才能快乐，只有爱好六龙，驾驭六龙上天，才合我的心意。我期盼乘黄能够从天而降，把我带上仙界。</p>
]]></content>
      
        <categories>
            
            <category> 诗集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数组的定义与使用]]></title>
      <url>/2017/07/16/----5/</url>
      <content type="html"><![CDATA[<h2 id="数组与方法参数的传递"><a href="#数组与方法参数的传递" class="headerlink" title="数组与方法参数的传递"></a>数组与方法参数的传递</h2><p>数组定义语法有如下两种： </p>
<ol>
<li>声明并开辟数组: <code>数据类型 数据名称[]  = new 数据类型[长度];</code></li>
<li>分不完成: <ol>
<li><code>声明数组：数组类型 数组名称[] = null;</code></li>
<li><code>开辟数组：数组名称 = new 数据类型[长度];</code></li>
</ol>
</li>
</ol>
<p>方法传递数据类型可以是基本数据类型也可以是数组数据类型，如果传递的是数组，要观察内存分布图。</p>
<p>范例：一个数组传递的程序</p>
<pre class=" language-bash"><code class="language-bash">public class ArrayDemo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int data <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span><span class="token punctuation">;</span>
                change<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> //int  tamp <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> data.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.println<span class="token punctuation">(</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
            //此方法定义在主类中，并且由主方法直接调用
        public static void change<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> *<span class="token operator">=</span> 2<span class="token punctuation">;</span>  // 将数组内容乘二2保存
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h4 id="内存分析图"><a href="#内存分析图" class="headerlink" title="内存分析图"></a>内存分析图</h4><p><img src="http://osltchohc.bkt.clouddn.com/屏幕快照 2017-07-16 21.29.21.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="屏幕快照 2017-07-16 21.29.21"></p>
<h5 id="在进行数组的引用传递过程之中，方法对数组的修改一定会影响到原始数据。"><a href="#在进行数组的引用传递过程之中，方法对数组的修改一定会影响到原始数据。" class="headerlink" title="在进行数组的引用传递过程之中，方法对数组的修改一定会影响到原始数据。"></a>在进行数组的引用传递过程之中，方法对数组的修改一定会影响到原始数据。</h5><h4 id="面试题：请编写一个数组排序操作（冒泡排序法）"><a href="#面试题：请编写一个数组排序操作（冒泡排序法）" class="headerlink" title="面试题：请编写一个数组排序操作（冒泡排序法）"></a>面试题：请编写一个数组排序操作（冒泡排序法）</h4><hr>
<pre class=" language-bash"><code class="language-bash">public class Array <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>2,1,6,8,3,9,4,7,5<span class="token punctuation">}</span><span class="token punctuation">;</span>
                sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> //实现排序
                print<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        public static void sort<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                //外层控制排序的次数
                        for<span class="token punctuation">(</span>int y <span class="token operator">=</span> 0<span class="token punctuation">;</span> y <span class="token operator">&lt;</span> arr.length - 1<span class="token punctuation">;</span> y++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        //内层控制每次的排序控制
                                if<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> arr <span class="token punctuation">[</span>y + 1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        int t <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                        arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                        arr<span class="token punctuation">[</span>y + 1<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        //专门定义一个输出功能的方法
        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                        System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="一维数组的转置"><a href="#一维数组的转置" class="headerlink" title="一维数组的转置"></a>一维数组的转置</h4><hr>
<pre class=" language-bash"><code class="language-bash">public class ArrayOne <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>1,2,3,4,5,6,7,8,9<span class="token punctuation">}</span><span class="token punctuation">;</span>
                reverse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>//实现转置
                print<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        //此方法专门实现数组的转置操作
        public static void reverse<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int len <span class="token operator">=</span> arr.length / 2<span class="token punctuation">;</span>//转置的次数
                int <span class="token function">head</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>//头部索引
                int <span class="token function">tail</span> <span class="token operator">=</span> arr.length - 1<span class="token punctuation">;</span>//尾部索引
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        int temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        arr<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        arr<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                        head++<span class="token punctuation">;</span>
                        tail--<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="二维数组的转置"><a href="#二维数组的转置" class="headerlink" title="二维数组的转置"></a>二维数组的转置</h4><hr>
<p>前提：是一个行与列完全相同的数组</p>
<pre class=" language-bash"><code class="language-bash">public class ArrayTwo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
                 <span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span>,<span class="token punctuation">{</span>4,5,6<span class="token punctuation">}</span>,<span class="token punctuation">{</span>7,8,9<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                reverse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> //实现转置
                print<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        //此方法专门实现数组的转置操作
        public static void reverse<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        for<span class="token punctuation">(</span>int y <span class="token operator">=</span> x<span class="token punctuation">;</span> y <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span>.length<span class="token punctuation">;</span> y++<span class="token punctuation">)</span><span class="token punctuation">{</span>
                                if<span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> //行与列不相同，进行交换
                                        int temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                        arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                        arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        //专门定义一个输出功能的方法
        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        for<span class="token punctuation">(</span>int y <span class="token operator">=</span> 0<span class="token punctuation">;</span> y <span class="token operator">&lt;</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span>.length<span class="token punctuation">;</span> y++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><hr>
<p>第一次转换：（ x = 0, y = x = 0,循环3次）<br>· y的第一次循环 （x==y，条件不满足，不进行交换）</p>
<p>· y的第二次循环 （x=0，y=1，条件满足，进行交换）</p>
<p>· y的第三次循环 （x=0，y=2，条件满足，进行交换）</p>
<p>第二次转换：（ x = 1，y = x = 1，循环2次）<br>· y的第一次循环 （x=1，y=1，条件不满足，不进行交换）</p>
<p>· y的第二次循环 （x=1，y=2，条件满足，进行交换）</p>
<p>第三次转换：（ x = 2， y = x = 2，循环1次）<br>· y的第一次循环 （x=2，y=2，条件不满足，不进行交换）</p>
<h2 id="数组操作方法"><a href="#数组操作方法" class="headerlink" title="数组操作方法"></a>数组操作方法</h2><p>Java本身针对数组是有提供类库的支持，例如如下两种与数组有关的操作方法。</p>
<ol>
<li><p>数组拷贝：可以将一个数组的部分内容拷贝到另外一个数组之中</p>
<ol>
<li>语法<code>System.arraycopy(原数组名称，原数组拷贝开始索引，目标数组名称，目标数组拷贝开始索引，长度);</code> </li>
<li><p>范例：实现数组拷贝</p>
<pre><code> 数组A：1、2、3、4、5、6、7、8
 数组B：11、22、33、44、55、66、77、88
 要求拷贝后的数组B：11、22、33、4、5、6、77、88
</code></pre></li>
</ol>
</li>
</ol>
<pre class=" language-bash"><code class="language-bash">public class ArrayOne <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int dataA<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>1,2,3,4,5,6,7,8<span class="token punctuation">}</span><span class="token punctuation">;</span>
                int dataB<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>11,22,33,44,55,66,77,88<span class="token punctuation">}</span><span class="token punctuation">;</span>
                System.arraycopy<span class="token punctuation">(</span>dataA,3,dataB,3,3<span class="token punctuation">)</span><span class="token punctuation">;</span>
                print<span class="token punctuation">(</span>dataB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ol>
<li>数组排序：<ol>
<li>语法：<code>java.util.Arrays.sort(data);</code></li>
<li>范例：实现排序</li>
</ol>
</li>
</ol>
<pre class=" language-bash"><code class="language-bash">public class ArrayOne <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                int data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>3,7,5,8,2,6,1<span class="token punctuation">}</span><span class="token punctuation">;</span>
                java.util.Arrays.sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                print<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="对象数组（重点）"><a href="#对象数组（重点）" class="headerlink" title="对象数组（重点）"></a>对象数组（重点）</h2><p>· 数组是引用类型，而类也同样是引用类型，所以如果是对象数组的话表示一个引用类型里面嵌套其他的引用类型。<br>· 所有的引用数据类型也同样可以定义数组，这样的数组称为对象数组。<br>·定义对象数组（以类为例），可以采用如下形式</p>
<pre><code>1. 动态初始化：开辟之后对象数组的内容都是null值
    |- 声明并实例化对象：  类名称 对象数组名称【】 = new 类名称【长度】;
    |- 分步完成：
        |·声明对象数组：类名称 对象数组名称【】 = null;
        |·开辟对象数组：对象数组名称 =  new 类名称【长度】;
2. 静态初始化：
    类名称 对象数组名称【】 = new 类名称【】{实例化对象，实例化对象，......}
</code></pre><h4 id="范例：对象数组的动态初始化"><a href="#范例：对象数组的动态初始化" class="headerlink" title="范例：对象数组的动态初始化"></a>范例：对象数组的动态初始化</h4><hr>
<pre class=" language-bash"><code class="language-bash">class Book <span class="token punctuation">{</span>
        private String title<span class="token punctuation">;</span>
        private double price<span class="token punctuation">;</span>
        public Book<span class="token punctuation">(</span>String t, double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                title <span class="token operator">=</span> t<span class="token punctuation">;</span>
                price <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        //setter，getter，无参构造略
        public String getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"书名:"</span> +title + <span class="token string">",价格："</span> + price<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


public class ArrayOne <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book books<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new Book<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">;</span> //开辟了一个三个长度的对象数组
                //对象数组中的每一个数据都需要分别实例化即对象数组的动态实例化
                books<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token string">"Java"</span>,68.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
                books<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token string">"JSP"</span>,78.8<span class="token punctuation">)</span><span class="token punctuation">;</span>
                books<span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token string">"Android"</span>,88.8<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> books.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.println<span class="token punctuation">(</span>books<span class="token punctuation">[</span>x<span class="token punctuation">]</span>.getInfo<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>


        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="对象数组实际上就是将多个对象交给数组统一管理。"><a href="#对象数组实际上就是将多个对象交给数组统一管理。" class="headerlink" title="对象数组实际上就是将多个对象交给数组统一管理。"></a>对象数组实际上就是将多个对象交给数组统一管理。</h5><h4 id="范例：使用静态初始化"><a href="#范例：使用静态初始化" class="headerlink" title="范例：使用静态初始化"></a>范例：使用静态初始化</h4><hr>
<pre class=" language-bash"><code class="language-bash">class Book <span class="token punctuation">{</span>
        private String title<span class="token punctuation">;</span>
        private double price<span class="token punctuation">;</span>
        public Book<span class="token punctuation">(</span>String t, double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                title <span class="token operator">=</span> t<span class="token punctuation">;</span>
                price <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        //setter，getter，无参构造略
        public String getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"书名:"</span> +title + <span class="token string">",价格："</span> + price<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


public class ArrayOne <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book books<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new Book<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>//开辟了一个三个长度的对象数组
                new Book<span class="token punctuation">(</span><span class="token string">"Java"</span>,68.8<span class="token punctuation">)</span>, //对象数组静态初始化
                new Book<span class="token punctuation">(</span><span class="token string">"JSP"</span>,78.8<span class="token punctuation">)</span>,
                new Book<span class="token punctuation">(</span><span class="token string">"Android"</span>,88.8<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> books.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.println<span class="token punctuation">(</span>books<span class="token punctuation">[</span>x<span class="token punctuation">]</span>.getInfo<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>


        public static void print<span class="token punctuation">(</span>int temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                for<span class="token punctuation">(</span>int x <span class="token operator">=</span> 0<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp.length<span class="token punctuation">;</span> x++<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        System.out.print<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> + <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL<关系型数据库常用概念>]]></title>
      <url>/2017/07/15/----7/</url>
      <content type="html"><![CDATA[<h2 id="MySQL-lt-关系型数据库常用概念-gt"><a href="#MySQL-lt-关系型数据库常用概念-gt" class="headerlink" title="MySQL&lt;关系型数据库常用概念&gt;"></a>MySQL&lt;关系型数据库常用概念&gt;</h2><p>数据库、数据库管理系统<br><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.32.35.png" alt="屏幕快照 2017-07-15 17.32.35"></p>
<p>关系型数据库常用概念</p>
<p><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.07.48.png" alt="屏幕快照 2017-07-15 17.07.48"></p>
<p><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.14.26.png" alt="屏幕快照 2017-07-15 17.14.26"></p>
<p><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.16.42.png" alt="屏幕快照 2017-07-15 17.16.42"></p>
<p>主键：</p>
<ol>
<li>不能重复，不能为空</li>
<li>若主键重复或为空则称之为失去实体完整性</li>
</ol>
<p><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.22.52.png" alt="屏幕快照 2017-07-15 17.22.52"></p>
<p><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.25.15.png" alt="屏幕快照 2017-07-15 17.25.15"></p>
<h2 id="结构化查询语句SQL简介"><a href="#结构化查询语句SQL简介" class="headerlink" title="结构化查询语句SQL简介"></a>结构化查询语句SQL简介</h2><p><img src="media/15001043958166/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-15%2017.28.59.png" alt="屏幕快照 2017-07-15 17.28.59"></p>
<h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><img src="media/15004333635462/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-19%2011.03.27.png" alt="屏幕快照 2017-07-19 11.03.27"></p>
<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p><img src="media/15004333635462/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-19%2011.05.07.png" alt="屏幕快照 2017-07-19 11.05.07"></p>
]]></content>
      
        <categories>
            
            <category> MySQL数据库 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[简单Java类]]></title>
      <url>/2017/07/14/----2/</url>
      <content type="html"><![CDATA[<p>第一个代码模型：简单Java类</p>
<h2 id="简单Java类"><a href="#简单Java类" class="headerlink" title="简单Java类"></a>简单Java类</h2><p>· 现在要求开发一个雇员的类，里面包含有雇员编号、姓名、职位、基本工资、佣金。</p>
<p>· 对于简单Java类而言，可以给出第一种开发要求：</p>
<ol>
<li>类名称必须存在意义，例如：Book，Emp；</li>
<li>类之中所有的属性必须<code>private</code>封装，封装后的属性必须提供有<code>setter</code>、<code>getter</code>；</li>
<li>类之中可以提供有任意多个构造方法，但是必须保留有一个无参构造方法；</li>
<li>类之中不允许出现任何的输出语句，所有信息输出必须交给被调用处输出；</li>
<li>类之中需要提供有一个去的完整信息的方法，暂定为：<code>getInfo()</code>，而且返回<code>String</code>型数据;</li>
</ol>
<hr>
<p>范例：开发程序类</p>
<pre class=" language-bash"><code class="language-bash">class Emp <span class="token punctuation">{</span>
        private int empno<span class="token punctuation">;</span> //定义一个有意义的类
        private String ename<span class="token punctuation">;</span>
        private String job<span class="token punctuation">;</span>
        private double sal<span class="token punctuation">;</span>
        private double <span class="token function">comm</span><span class="token punctuation">;</span>

        public Emp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> //无参
        public Emp<span class="token punctuation">(</span>int eno, String ena, String j, double s, double c <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                empno <span class="token operator">=</span> eno<span class="token punctuation">;</span>
                ename <span class="token operator">=</span> ena<span class="token punctuation">;</span>
                job <span class="token operator">=</span> j<span class="token punctuation">;</span>
                sal <span class="token operator">=</span> s<span class="token punctuation">;</span>
                <span class="token function">comm</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>//有参

        public void setEmpno<span class="token punctuation">(</span>int e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                empno <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public int getEmpno<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> empno<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        public void setEname<span class="token punctuation">(</span>String e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ename <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public String getEname<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> ename<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        public void setJob<span class="token punctuation">(</span>String j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                job <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public String getJob<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> job<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        public void setSal<span class="token punctuation">(</span>double s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sal <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public double getSal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> sal<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        public void setComm<span class="token punctuation">(</span>double c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">comm</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public double getComm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">comm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        public String  getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span>  <span class="token string">"雇员编号："</span> + empno + <span class="token string">"\n"</span>+
                        <span class="token string">"雇员姓名："</span> + ename + <span class="token string">"\n"</span>+
                        <span class="token string">"雇员职位："</span> + job + <span class="token string">"\n"</span>+
                        <span class="token string">"基本工资："</span> + sal + <span class="token string">"\n"</span>+
                        <span class="token string">"佣    金："</span> + <span class="token function">comm</span> <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>范例：编写测试程序</p>
<pre class=" language-bash"><code class="language-bash">public class Demo <span class="token punctuation">{</span>
        public static void main <span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Emp e <span class="token operator">=</span> new Emp<span class="token punctuation">(</span>7369, <span class="token string">"SMITH"</span>, <span class="token string">"CLERK"</span>, 800.0, 1.0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                e.setEname<span class="token punctuation">(</span><span class="token string">"ALLEN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System.out.println<span class="token punctuation">(</span>e.getInfo<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
                System.out.println<span class="token punctuation">(</span><span class="token string">"姓名："</span>+e.getEname<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>所有类之中提供的<code>setter</code>、<code>getter</code>方法可能某些操作不会使用到，但是依然必须提供，同时所有的<code>setter</code>方法除了具备有设置属性的内容之外，也具备修改属性内容的功能。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单Java类是日后进行整个项目开发的千分之一的组成部分，也是最为重要的组成部分。</p>
]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象<封装性>]]></title>
      <url>/2017/07/13/----1/</url>
      <content type="html"><![CDATA[<p>封装性</p>
<h2 id="面向对象—封装性"><a href="#面向对象—封装性" class="headerlink" title="面向对象—封装性"></a>面向对象—封装性</h2><pre class=" language-bash"><code class="language-bash">class Book <span class="token punctuation">{</span>
        private String title<span class="token punctuation">;</span>
        private double price<span class="token punctuation">;</span>
        public void setTitle<span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                title <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public void setPrice<span class="token punctuation">(</span>double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                if<span class="token punctuation">(</span>p<span class="token operator">></span>0.0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        price <span class="token operator">=</span> p<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        public String getTitle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> title<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public double getPrice<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> price<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public void getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System.out.println<span class="token punctuation">(</span><span class="token string">"图书名称："</span> + title + <span class="token string">",价格:"</span> +price<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
public class TestDemo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book book <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.setTitle<span class="token punctuation">(</span><span class="token string">"java开发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.setPrice<span class="token punctuation">(</span>-90.6<span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.getInfo <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>1.属性前加上 <code>private</code>时，外部的对象无法再直接调用类中的属性了，所以现在等于是属性对外部而言就不可见了。<br>2.如果想要程序正常使用，就需要让外部程序可操作。在开发当中针对于属性有这样一种定义：所有在类中定义的属性都要求使用<code>private</code>声明，如果属性需要被外部所使用，那么按照要求定义相应的<code>setter</code>,<code>getter</code>方法，以 String title为例：</p>
<pre><code>·setter 方法主要是设置内容， public void setTitle（String t）；有参数
·getter 方法主要是取得属性内容： public String getTitle（）；无参数
</code></pre><p>·如果真的需要加入检测错误的代码，那么应该在setter之中增加，因为getter只是简单地返回数据。</p>
<p>·范例：增加验证</p>
<pre class=" language-bash"><code class="language-bash"> public void setPrice<span class="token punctuation">(</span>double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                if<span class="token punctuation">(</span>p<span class="token operator">></span>0.0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        price <span class="token operator">=</span> p<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>对于数据的验证部分在标准开发之中应该是由其他的辅助代码完成的，而在实际开发之中setter往往是简单地设置数据，getter简单地的去的数据而已。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.封装性就是保证类内部的定义被外部不可见，但是本次所讲解的封装，只是所有面向对象中封装的一小部分。<br>2.所有属性都必须使用private封装，封装后的属性如果要被外部所访问，要定义setter，getter。<br>3.访问控制符包括：private → default → protected → public 访问控制级别由小到大。</p>
<table>
<thead>
<tr>
<th></th>
<th>private （当前类访问权限）</th>
<th>default （包访问权限）</th>
<th>protected （子类访问权限）</th>
<th>public （公共访问权限）</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一个包中</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>子类中</td>
<td></td>
<td></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>全局范围内</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody>
</table>
<p>4.关于访问控制符的使用，存在如下几条基本原则：<br>①.类里面绝大部分成员变量都应该使用<code>private</code>修饰，只有一些<code>static</code>修饰的，类似全局变量的成员变量，才可以考虑使用<code>public</code>修饰。除此之外，有些方法只用于辅助实现该类的其他方法，这些方法被称为工具方法，工具方法也应该使用<code>private</code>修饰。<br>②.如果某个类主要用做其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，而不想被外界直接调用，则应该使用<code>protected</code>修饰这些方法。<br>③.希望暴露出来给其他类自由调用的方法应该使用<code>public</code>修饰。因此，累的构造器通过使用<code>public</code>修饰，从而允许在其他地方创建该类的实例。因为外部类通常希望被其他类自由使用，所以大部分外部类都使用<code>public</code>修饰。</p>
]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象<类与对象>]]></title>
      <url>/2017/07/13/----3/</url>
      <content type="html"><![CDATA[<h2 id="面向对象程序设计—类与对象"><a href="#面向对象程序设计—类与对象" class="headerlink" title="面向对象程序设计—类与对象"></a>面向对象程序设计—类与对象</h2><p>   面向对象：以一种组件化的形式进行代码的设计。<br>   优点：代码重用。    </p>
<h4 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h4><hr>
<ol>
<li>封装性：保护内部的定义结构安全性 。</li>
<li>继承性：在已有的程序结构上继续扩充新的功能。</li>
<li>多态性：指的是在某一个概念范围内的满足。  </li>
</ol>
<h4 id="面向对象的开发步骤："><a href="#面向对象的开发步骤：" class="headerlink" title="面向对象的开发步骤："></a>面向对象的开发步骤：</h4><pre><code>OOA（面向对象分析） 
OOD（面向对象设计）
OOP（面向对象编程）
</code></pre><p>类实际上是对象操作的模板，但是类不能直接使用，必须通过实例对象使用。</p>
<hr>
<pre class=" language-bash"><code class="language-bash">class Book <span class="token punctuation">{</span>
        String title<span class="token punctuation">;</span>
        double price<span class="token punctuation">;</span>
        public void getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System.out.println<span class="token punctuation">(</span><span class="token string">"图书名称："</span> + title + <span class="token string">",价格:"</span> +price<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
</code></pre>
<p>在类里面定义了两个属性和一个方法，类现在已经产生，但是如果想要使用类必须要有对象，那么对象的定义格式有如下两种。</p>
<pre><code>    ·声明并实例化对象：类名称 对象名称 = new 类名称（）；
    ·分步完成：
        -声明对象：类名称 对象名称 = null；
        -实例化对象： 对象名称 = new 类名称（）；
</code></pre><p>引用数据类型与基本数据类型最大的不同在于需要内存的开辟及使用，所以关键字 new 的主要功能就是开辟内存空间，即：只要是引用数据类型想使用，那么就必须使用关键词 new 开辟空间。<br>当一个对象实例化之后那么就可以按照如下的方式利用对象来操作类的结构：</p>
<pre><code>·对象.属性：表示要操作类中的属性内容
·对象.方法()：表示要调用类中的方法      
</code></pre><p>范例：使用类—在主类中使用Book类</p>
<pre class=" language-bash"><code class="language-bash">public class TestDemo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book bk <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> //声明并实例化对象
                bk.title <span class="token operator">=</span> <span class="token string">"java开发"</span><span class="token punctuation">;</span> //操作属性内容
                bk.price <span class="token operator">=</span> 90<span class="token punctuation">;</span> //操作属性内容
                bk.getInfo <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //调用类中的getInfo（）方法

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果想要对以上的程序进行内存分析，可以首先给出两块内存空间的概念：</p>
<pre><code>·堆内存：保存每一个对象的属性内容，堆内存需要用关键字 new 在可以开辟新。
·栈内存：保存的是一块堆内存的地址，但是为了分析方便，可以简单地理解栈内存保存的是对象名字；
</code></pre><h4 id="引用数据的初步分析"><a href="#引用数据的初步分析" class="headerlink" title="引用数据的初步分析:"></a>引用数据的初步分析:</h4><hr>
<p>引用类似C++的指针，但比之间更加简单</p>
<pre class=" language-bash"><code class="language-bash">public class TestDemo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book bookA <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> //声明并实例化对象
                Book bookB <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
                bookA.title <span class="token operator">=</span> <span class="token string">"Java开发"</span><span class="token punctuation">;</span> //操作属性内容
                bookA.price <span class="token operator">=</span> 89.8<span class="token punctuation">;</span> //操作属性内容
                bookB.title <span class="token operator">=</span> <span class="token string">"JSP开发"</span><span class="token punctuation">;</span> //操作属性内容
                bookB.price <span class="token operator">=</span> 69.8<span class="token punctuation">;</span> //操作属性内容
                bookB <span class="token operator">=</span> bookA<span class="token punctuation">;</span>//引用关系
                bookB.price <span class="token operator">=</span> 100.1<span class="token punctuation">;</span>
                bookA.getInfo <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //调用类中的getInfo（）方法

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="内存分析图："><a href="#内存分析图：" class="headerlink" title="内存分析图："></a>内存分析图：</h4><p><img src="http://osltchohc.bkt.clouddn.com/屏幕快照 2017-07-13 15.34.49.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="屏幕快照 2017-07-13 15.34.49"></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1.类描述的是公共特征，类必须通过对象才可以使用；<br>2.声明对象指的是为开辟堆内存的对象，如果直接使用此对象会出现“NullPointerException”异常；对象可以通过关键字 new 来进行堆内存空间的开辟，有了对内存应用的对象才成为实例化对象；<br>3.堆内存保存的是对象中所有属性的内容，而栈内存保存的是对内存的地址数值（为了简单理解，才称栈内存保存的是对象名称）；<br>4.垃圾空间指的是没有任何栈内存指向的堆内存空间，会被GC不定期进行回收；<br>5.熟练掌握以上内存图的分析方法；</p>
]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[莎士比亚诗集]]></title>
      <url>/2017/07/06/---/</url>
      <content type="html"><![CDATA[<h2 id="《十四行诗十八首》-莎士比亚"><a href="#《十四行诗十八首》-莎士比亚" class="headerlink" title="《十四行诗十八首》 莎士比亚"></a>《十四行诗十八首》 <code>莎士比亚</code></h2><p><img src="http://osltchohc.bkt.clouddn.com/photo.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="photo"></p>
<hr>
<blockquote>
<pre><code>                    我怎么能够将你比作夏天? 你比夏天更美丽温婉。

                    狂风将五月的蓓蕾凋残，夏日的勾留何其短暂。

                    休恋那丽日当空，转眼会云雾迷蒙; 

                    休叹那百花凋零，摧折于无常天命;

                    唯有你永恒的夏日长新，你的美貌亦毫发无损。

                    死神也无缘将你幽禁，你在我永恒的诗中长存。

                    只要世间尚有人吟诵我的诗篇，这诗就将不朽，永葆你的芳颜。
</code></pre></blockquote>
]]></content>
      
        <categories>
            
            <category> 诗集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
