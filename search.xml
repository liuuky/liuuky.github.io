<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[面向对象<封装性>]]></title>
      <url>/2017/07/13/----1/</url>
      <content type="html"><![CDATA[<p>封装性</p>
<h1 id="面向对象—封装性"><a href="#面向对象—封装性" class="headerlink" title="面向对象—封装性"></a>面向对象—封装性</h1><pre class=" language-bash"><code class="language-bash">class Book <span class="token punctuation">{</span>
        private String title<span class="token punctuation">;</span>
        private double price<span class="token punctuation">;</span>
        public void setTitle<span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                title <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public void setPrice<span class="token punctuation">(</span>double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                if<span class="token punctuation">(</span>p<span class="token operator">></span>0.0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        price <span class="token operator">=</span> p<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        public String getTitle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> title<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public double getPrice<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> price<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public void getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System.out.println<span class="token punctuation">(</span><span class="token string">"图书名称："</span> + title + <span class="token string">",价格:"</span> +price<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
public class TestDemo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book book <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.setTitle<span class="token punctuation">(</span><span class="token string">"java开发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.setPrice<span class="token punctuation">(</span>-90.6<span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.getInfo <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>1.属性前加上 <code>private</code>时，外部的对象无法再直接调用类中的属性了，所以现在等于是属性对外部而言就不可见了。<br>2.如果想要程序正常使用，就需要让外部程序可操作。在开发当中针对于属性有这样一种定义：所有在类中定义的属性都要求使用<code>private</code>声明，如果属性需要被外部所使用，那么按照要求定义相应的<code>setter</code>,<code>getter</code>方法，以 String title为例：</p>
<pre><code>·setter 方法主要是设置内容， public void setTitle（String t）；有参数
·getter 方法主要是取得属性内容： public String getTitle（）；无参数
</code></pre><p>·如果真的需要加入检测错误的代码，那么应该在setter之中增加，因为getter只是简单地返回数据。</p>
<p>·范例：增加验证</p>
<pre class=" language-bash"><code class="language-bash"> public void setPrice<span class="token punctuation">(</span>double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                if<span class="token punctuation">(</span>p<span class="token operator">></span>0.0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        price <span class="token operator">=</span> p<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>对于数据的验证部分在标准开发之中应该是由其他的辅助代码完成的，而在实际开发之中setter往往是简单地设置数据，getter简单地的去的数据而已。</p>
<p>#总结<br>1.封装性就是保证类内部的定义被外部不可见，但是本次所讲解的封装，只是所有面向对象中封装的一小部分。<br>2.所有属性都必须使用private封装，封装后的属性如果要被外部所访问，要定义setter，getter。<br>3.访问控制符包括：private → default → protected → public 访问控制级别由小到大。</p>
<table>
<thead>
<tr>
<th></th>
<th>private （当前类访问权限）</th>
<th>default （包访问权限）</th>
<th>protected （子类访问权限）</th>
<th>public （公共访问权限）</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一个包中</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>子类中</td>
<td></td>
<td></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>全局范围内</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody>
</table>
<p>4.关于访问控制符的使用，存在如下几条基本原则：<br>①.类里面绝大部分成员变量都应该使用<code>private</code>修饰，只有一些<code>static</code>修饰的，类似全局变量的成员变量，才可以考虑使用<code>public</code>修饰。除此之外，有些方法只用于辅助实现该类的其他方法，这些方法被称为工具方法，工具方法也应该使用<code>private</code>修饰。<br>②.如果某个类主要用做其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，而不想被外界直接调用，则应该使用<code>protected</code>修饰这些方法。<br>③.希望暴露出来给其他类自由调用的方法应该使用<code>public</code>修饰。因此，累的构造器通过使用<code>public</code>修饰，从而允许在其他地方创建该类的实例。因为外部类通常希望被其他类自由使用，所以大部分外部类都使用<code>public</code>修饰。</p>
]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象<封装性>]]></title>
      <url>/2017/07/13/----2/</url>
      <content type="html"><![CDATA[<p>封装性</p>
<h2 id="面向对象—封装性"><a href="#面向对象—封装性" class="headerlink" title="面向对象—封装性"></a>面向对象—封装性</h2><pre class=" language-bash"><code class="language-bash">class Book <span class="token punctuation">{</span>
        private String title<span class="token punctuation">;</span>
        private double price<span class="token punctuation">;</span>
        public void setTitle<span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                title <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public void setPrice<span class="token punctuation">(</span>double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                if<span class="token punctuation">(</span>p<span class="token operator">></span>0.0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        price <span class="token operator">=</span> p<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        public String getTitle<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> title<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public double getPrice<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> price<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        public void getInfo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System.out.println<span class="token punctuation">(</span><span class="token string">"图书名称："</span> + title + <span class="token string">",价格:"</span> +price<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
public class TestDemo <span class="token punctuation">{</span>
        public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Book book <span class="token operator">=</span> new Book<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.setTitle<span class="token punctuation">(</span><span class="token string">"java开发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.setPrice<span class="token punctuation">(</span>-90.6<span class="token punctuation">)</span><span class="token punctuation">;</span>
                book.getInfo <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>1.属性前加上 <code>private</code>时，外部的对象无法再直接调用类中的属性了，所以现在等于是属性对外部而言就不可见了。<br>2.如果想要程序正常使用，就需要让外部程序可操作。在开发当中针对于属性有这样一种定义：所有在类中定义的属性都要求使用<code>private</code>声明，如果属性需要被外部所使用，那么按照要求定义相应的<code>setter</code>,<code>getter</code>方法，以 String title为例：</p>
<pre><code>·setter 方法主要是设置内容， public void setTitle（String t）；有参数
·getter 方法主要是取得属性内容： public String getTitle（）；无参数
</code></pre><p>·如果真的需要加入检测错误的代码，那么应该在setter之中增加，因为getter只是简单地返回数据。</p>
<p>·范例：增加验证</p>
<pre class=" language-bash"><code class="language-bash"> public void setPrice<span class="token punctuation">(</span>double p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                if<span class="token punctuation">(</span>p<span class="token operator">></span>0.0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        price <span class="token operator">=</span> p<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>对于数据的验证部分在标准开发之中应该是由其他的辅助代码完成的，而在实际开发之中setter往往是简单地设置数据，getter简单地的去的数据而已。</p>
<p><img src="http://osltchohc.bkt.clouddn.com/屏幕快照 2017-07-13 15.34.49.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="屏幕快照 2017-07-13 15.34.49"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="###总结"></a>###总结</h2><p>1.封装性就是保证类内部的定义被外部不可见，但是本次所讲解的封装，只是所有面向对象中封装的一小部分。<br>2.所有属性都必须使用private封装，封装后的属性如果要被外部所访问，要定义setter，getter。<br>3.访问控制符包括：private → default → protected → public 访问控制级别由小到大。</p>
<table>
<thead>
<tr>
<th></th>
<th>private （当前类访问权限）</th>
<th>default （包访问权限）</th>
<th>protected （子类访问权限）</th>
<th>public （公共访问权限）</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一个包中</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>子类中</td>
<td></td>
<td></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>全局范围内</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody>
</table>
<p>4.关于访问控制符的使用，存在如下几条基本原则：<br>①.类里面绝大部分成员变量都应该使用<code>private</code>修饰，只有一些<code>static</code>修饰的，类似全局变量的成员变量，才可以考虑使用<code>public</code>修饰。除此之外，有些方法只用于辅助实现该类的其他方法，这些方法被称为工具方法，工具方法也应该使用<code>private</code>修饰。<br>②.如果某个类主要用做其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，而不想被外界直接调用，则应该使用<code>protected</code>修饰这些方法。<br>③.希望暴露出来给其他类自由调用的方法应该使用<code>public</code>修饰。因此，累的构造器通过使用<code>public</code>修饰，从而允许在其他地方创建该类的实例。因为外部类通常希望被其他类自由使用，所以大部分外部类都使用<code>public</code>修饰。</p>
]]></content>
      
        <categories>
            
            <category> Java8程序设计 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[莎士比亚诗集]]></title>
      <url>/2017/07/06/---/</url>
      <content type="html"><![CDATA[<h2 id="《十四行诗十八首》-莎士比亚"><a href="#《十四行诗十八首》-莎士比亚" class="headerlink" title="《十四行诗十八首》 莎士比亚"></a>《十四行诗十八首》 <code>莎士比亚</code></h2><p><img src="http://osltchohc.bkt.clouddn.com/photo.png?
imageView2/0/q/75|watermark/2/text/S2V2aW4ncyBCbG9n/font/5a6L5L2T/fontsize/500/fill/I0VCRjBGNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="photo"></p>
<hr>
<blockquote>
<pre><code>                    我怎么能够将你比作夏天? 你比夏天更美丽温婉。

                    狂风将五月的蓓蕾凋残，夏日的勾留何其短暂。

                    休恋那丽日当空，转眼会云雾迷蒙; 

                    休叹那百花凋零，摧折于无常天命;

                    唯有你永恒的夏日长新，你的美貌亦毫发无损。

                    死神也无缘将你幽禁，你在我永恒的诗中长存。

                    只要世间尚有人吟诵我的诗篇，这诗就将不朽，永葆你的芳颜。
</code></pre></blockquote>
]]></content>
      
        <categories>
            
            <category> 诗集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
